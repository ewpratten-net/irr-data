
# Commonly used variables
define OWNAS = {{ own_asn }};
router id {{ router_id }};

# Everyone shall announce least specific
protocol static {
    ipv6;
    # route 2a12:dd47:9000::/36 unreachable;
} 

# Check function to see if IRR allows us to originate a prefix
function can_locally_originate_route() {
    if (net.type = NET_IP4) then {
        return net ~ [
            {{ self_origin_routes.ipv4 | join(', ') }}
        ];
    }
    if (net.type = NET_IP6) then {
        return net ~ [
            {{ self_origin_routes.ipv6 | join(', ') }}
        ];
    }
    return false;
}

# Check function to see if IRR allows us to declare a route "downstream"
function is_downstream_route() {
    if can_locally_originate_route() then return false;
    if (net.type = NET_IP4) then {
        return net ~ [
            {{ downstream_routes.ipv4 | join(', ') }}
        ];
    }
    if (net.type = NET_IP6) then {
        return net ~ [
            {{ downstream_routes.ipv6 | join(', ') }}
        ];
    }
    return false;
}

# Hack to let only some routes pass over the backbone
function can_share_route_with_backbone() {
    if (net.type = NET_IP4) then {
        return false;
    }
    if (net.type = NET_IP6) then {
        return net ~ [
            2a07:54c2:b00b::/48
        ];
    }
    return false;
}

# RPKI
{% include 'rpki.conf' %}

# Load utils and stuff 
{% include 'utils.conf' %}
{% include 'blackhole.conf' %}
{% include 'actions.conf' %}

# Multihop routes are needed
ipv4 table multihop_madness_v4;
ipv6 table multihop_madness_v6;
protocol static MultihopStatic_v4 {
    ipv4{ table multihop_madness_v4; import all; };

    # Toronto static
    {% if router_id == '74.119.150.163' %}
	    route 23.159.16.0/24 via 74.119.150.1;
        route 170.39.230.0/24 via 74.119.150.1;
	    route 74.119.150.0/24 via 74.119.150.1;
    {% endif %}

    # NJ static
    {% if router_id == '68.232.175.168' %}
        route 169.254.169.254/32 via 68.232.175.1;
    {% endif %}
}
protocol static MultihopStatic_v6 {
	ipv6{ table multihop_madness_v6; import all; };
    
    # Everyone needs the backbone route
    route 2a12:dd47:9000::/48 via "backbone";

    # Toronto static
    {% if router_id == '74.119.150.163' %}
	    route 2602:fd50:101::/48 via fe80::464c:a8ff:fe18:6665%'ens3';
	    route 2602:fd50:100::/48 via fe80::464c:a8ff:fe18:6665%'ens3'; #2602:fd50:101:1::1;
    {% endif %}
    
    # NJ static
    {% if router_id == '68.232.175.168' %}
    	route 2001:19f0:ffff::1/128 via fe80::5400:4ff:fe1a:14d6%'enp1s0';
    {% endif %}
}

# Kernel
filter local_import {
    if !can_locally_originate_route() then reject;
    accept;
}
filter kernel_export {
    reject_bogon_routes();
    if source = RTS_DEVICE then reject;
    krt_metric = 1100;
    accept;
}
protocol device {};
protocol direct { 
    ipv4 { import filter local_import; }; 
    ipv6 { import filter local_import; }; 
    interface "*";
}
protocol kernel {
    ipv4 {
        import filter local_import;
        export filter kernel_export;
    };
    learn;
    scan time 10;
    metric 0;
}
protocol kernel {
    ipv6 {
        import filter local_import;
        export filter kernel_export;
    };
    learn;
    scan time 10;
    metric 0;
}

# Backbone bfd
protocol bfd {
    interface "backbone" {
        interval 200 ms;
        multiplier 10;
    };
}

# ASN banlist
define BANNED_ASNS = [ {{ banned_ases | join(', ') }} ];

# Peers
{% for peer in routing_policy %}
template bgp tl_{{ peer.name | upper }} {
    local as {{ peer.own_as }};
    {% if peer.multihop %}
        multihop;
    {% endif %}
    {% if peer.password %}
        password "{{ peer.password }}";
    {% endif %}

    {% set allowed_imports = peer.get_peer_allowed_routes() %}
    {% set allowed_exports = peer.get_allowed_routes_for_export() %}

    {% for num in [4,6] %}
    ipv{{ num }} {

        add paths;
        {% if peer.extended_nexthop %}
        extended next hop;
        {% endif %}
        {% if peer.multihop %}
        igp table multihop_madness_v{{ num }};
        {% endif %}

        import filter {
            # Filter out the bad
            reject_transit_paths();
            reject_bogon_routes();
            {#% if not peer.rewrite_as_to %#}
            # reject_bogon_asns();
            {#% endif %#}
            reject_out_of_bounds_routes();
            honor_graceful_shutdown();
            if bgp_path ~ BANNED_ASNS then reject_route("ASN Banned");

            # Keep my monitoring happy by not importing bgp.tools' own routes
            case net.type {
                NET_IP4: if net ~ 185.230.223.0/24 then return false;
                NET_IP6: if net ~ 2a0c:2f07:9459::/48 then return false;
            }

            # Prepend correct ASN if needed
            {% if peer.rewrite_as_to %}
            bgp_path.prepend({{ peer.rewrite_as_to }});
            bgp_large_community.add((OWNAS,0,2001));
            {% endif %}

            # Drop denied downstreams
            {% if peer.drop_ases %}
            if (bgp_path ~ [ {{peer.drop_ases | join(', ')}} ]) then reject;
            {% endif %}

            # Remove private ASes
            remove_private_asns();

            # Vultr is weird
            {% if peer.peer_as == "64515" %}
            if (bgp_path.len = 0) then bgp_path.prepend(20473);
            if (bgp_path.len = 1 && bgp_path.first != 20473) then bgp_path.prepend(20473);
            {% endif %}

            # Finally perform RPKI check
            reject_rpki_invalid();

            # Prepend on import if needed
            {% for i in peer.prepend_in %}
            bgp_path.prepend(OWNAS);
            {% endfor %}

            # Only allow specified routes from the peer
            if (net.type = NET_IP4) then {
                {% if allowed_imports.ipv4 %}
                if !(net ~ [
                    {{ allowed_imports.ipv4 | join(', ') }}
                ]) then reject;
                {% else %}
                reject;
                {% endif %}
            }
            if (net.type = NET_IP6) then {
                {% if allowed_imports.ipv6 %}
                if !(net ~ [
                    {{ allowed_imports.ipv6 | join(', ') }}
                ]) then reject;
                {% else %}
                reject;
                {% endif %}
            }

            # Set origin communities
            bgp_large_community.add((OWNAS,0,1010));
            if is_downstream_route() then bgp_large_community.add((OWNAS,0,1020));

            accept;
        };
        export filter {
            remove_private_asns();
            reject_bogon_routes();
            reject_out_of_bounds_routes();

            # Drop routes with no-export
            if (bgp_large_community ~ [(OWNAS, 0, 0)]) then reject;
            if (bgp_community ~ [(65535, 666)]) then reject;

            # Require paths to start with own as
            {% if "0.0.0.0/0{0,32}" not in allowed_exports.ipv4 and "::/0{0,128}" not in allowed_exports.ipv6 %}
            # if bgp_path.len > 0 && bgp_path.first != OWNAS then reject;
            {% endif %}

            # Only allow specified routes to the peer
            if (net.type = NET_IP4) then {
                {% if allowed_exports.ipv4 %}
                    if !(net ~ [
                        {{ allowed_exports.ipv4 | join(', ') }}
                    ]) then reject;
                {% endif %}
            }
            if (net.type = NET_IP6) then {
                {% if allowed_exports.ipv6 %}
                    if !(net ~ [
                        {{ allowed_exports.ipv6 | join(', ') }}
                    ]) then reject;
                {% endif %}
            }

            # Prepend on export if needed
            {% for i in peer.prepend_out %}
            bgp_path.prepend(OWNAS);
            {% endfor %}

            # Handle setting communities
            {% for community in peer.export_communities %}
            bgp_community.add(({{ community }}));
            {% endfor %}
            {% for community in peer.export_large_communities %}
            bgp_large_community.add(({{ community }}));
            {% endfor %}

            # Set origin communities
            if (bgp_path.len = 0) then bgp_large_community.add((OWNAS,0,1000));

            accept;
        };
    };
    {% endfor %}
}

{% for address in peer.peer_neighbor_ips %}
{% if ":" in address %}
{% set address_kind = 6 %}
{% else %}
{% set address_kind = 4 %}
{% endif %}
protocol bgp {{ peer.name | upper }}_V{{ address_kind }}_{{ loop.index }} from tl_{{ peer.name | upper }} {
    neighbor {{ address }} as {{ peer.peer_as }};
}
{% endfor%}
{% endfor %}

{% if router_id == '74.119.150.163' %}
protocol bgp backbone {
    local as OWNAS;
    neighbor range 2a12:dd47:9000::/48 as 4204466000;
    rs client;
    bfd;
    ipv4 {
        igp table multihop_madness_v6;
        extended next hop;
        add paths;
        next hop self;
        import filter { 
            bgp_large_community.add((OWNAS,0,1900));
            return can_locally_originate_route() || is_downstream_route();
        };
        export filter {
            if !can_share_route_with_backbone() then {
                bgp_large_community.add((OWNAS,0,0));
            }
            return can_locally_originate_route() || is_downstream_route();
        };
    };
    ipv6 {
        igp table multihop_madness_v6;
        add paths;
        next hop self;
        import filter { 
            bgp_large_community.add((OWNAS,0,1900));
            return can_locally_originate_route() || is_downstream_route();
        };
        export filter {
            if !can_share_route_with_backbone() then {
                bgp_large_community.add((OWNAS,0,0));
            }
            return can_locally_originate_route() || is_downstream_route();
        };
    };
}
{% else %}
protocol bgp backbone {
    local as 4204466000;
    neighbor 2a12:dd47:9000::1 as OWNAS;
    bfd;
    ipv4 {
        igp table multihop_madness_v6;
        extended next hop;
        add paths;
        next hop self;
        import filter { 
            bgp_large_community.add((OWNAS,0,1900));
            return can_locally_originate_route() || is_downstream_route();
        };
        export filter {
            if !can_share_route_with_backbone() then {
                bgp_large_community.add((OWNAS,0,0));
            }
            return can_locally_originate_route() || is_downstream_route();
        };
    };
    ipv6 {
        igp table multihop_madness_v6;
        add paths;
        next hop self;
        import filter { 
            bgp_large_community.add((OWNAS,0,1900));
            return can_locally_originate_route() || is_downstream_route();
        };
        export filter {
            if !can_share_route_with_backbone() then {
                bgp_large_community.add((OWNAS,0,0));
            }
            return can_locally_originate_route() || is_downstream_route();
        };
    };
}
{% endif %}